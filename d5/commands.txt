


 +	Создать двух пользователей (с помощью метода User.objects.create_user('username')).
 +	Создать два объекта модели Author, связанные с пользователями.
 +	Добавить 4 категории в модель Category.
 +	Добавить 2 статьи и 1 новость.
 +	Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
 +	Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
 +	Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
 +	Обновить рейтинги пользователей.
 +	Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
 +	Вывести дату добавления, !username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
 +	Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.









python -m venv venv

venv\scripts\activate

pip install django

python -m django-admin startproject NewsPaper

cd newspaper

python manage.py makemigrations

python manage.py migrate

py manage.py shell

from news.models import *

u1 = User.objects.create_user(username='Sam')  #!user

Author.objects.create(authorUser=u1)

Category.objects.create(name='IT')		#!category

Category.objects.create(name='ANIMALS')

Category.objects.create(name='WEATHER')

Category.objects.create(name='POLITICS')

author = Author.objects.get(id=1)

Post.objects.create(author=author, categoryType='NW', title='sometitle', text='somebigtext')

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))

Post.objects.create(author=author, categoryType='AR', title='articletitle', text='articlebigtext1')

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))

Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='anytextauthor')

Comment.objects.get(id=1).like()

Comment.objects.get(id=1).dislike()

Comment.objects.get(id=1).dislike()

Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='comment2')

a=Author.objects.get(id=1)

a.update_rating()

a.ratingAuthor

Post.objects.get(id=1).like()

c=User.objects.create_user(username='Sn')

Author.objects.create(authorUser=c)

author2 = Author.objects.get(id=2)

Post.objects.create(author=author2, categoryType='AR', title='articletitle2', text='articlebigtext2')

Post.objects.create(author=author2, categoryType='NW', title='news2', text='newstext2')

Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='comment3')

Comment.objects.create(commentPost=Post.objects.get(id=4), commentUser=Author.objects.get(id=1).authorUser, text='comment4')

Post.objects.get(id=3).postCategory.add(Category.objects.get(id=2)

Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3)

Comment.objects.get(id=2).dislike()

Comment.objects.get(id=2).dislike()

Comment.objects.get(id=3).dislike()

Comment.objects.get(id=4).like()

Comment.objects.get(id=4).like()

Comment.objects.get(id=4).like()

Comment.objects.get(id=4).like()

Comment.objects.get(id=4).like()

a=Author.objects.get(id=1)

a.update_rating()

a.ratingAuthor

a1=Author.objects.get(id=2)

a1.update_rating()

a1.ratingAuthor

r= Comment.objects.order_by('-rating')

for i in r:
...     i.rating
...     i.commentUser


d=Comment.objects.get(id=4)

d.dateCreation

d.commentUser

d.rating

x=Post.objects.get(id=4)

x.preview()

x.text

d.dateCreation

d.commentUser

d.rating

d.text




